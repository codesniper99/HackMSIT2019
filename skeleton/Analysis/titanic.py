# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tE-r301h25oES4_mGA8IadY_FHQBc0vi
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics
import gc
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline


import warnings
warnings.filterwarnings('ignore')

train = pd.read_csv('train.csv')
train.head()

test = pd.read_csv("test.csv")
test.head()

train['Survived'].value_counts().plot.bar()

train.describe()

test.describe()

train.info()

test.info()

train.isnull().sum()

test.isnull().sum()

train.groupby(['Sex' , 'Survived'])['Survived'].count()

f , ax  = plt.subplots(1, 2 ,figsize=(18 , 8))
train[['Sex' , 'Survived']].groupby('Sex').mean().plot.bar(ax = ax[0])
ax[0].set_title('Survived VS Sex')
sns.countplot('Sex' , hue = 'Survived'  , data = train , ax= ax[1])
ax[1].set_title('Sex:Survived VS Dead')
plt.show()

f,ax = plt.subplots(1 , 2  , figsize=(18 , 8))
train['Pclass'].value_counts().plot.bar(ax = ax[0])
ax[0].set_title('Pclass VS Survived')
sns.countplot('Pclass' , hue='Survived' , data = train ,ax = ax[1])
ax[1].set_title('Pclass : Survived vs Dead')
plt.show()

sns.factorplot('Pclass' , 'Survived' , hue = 'Sex' , data =train)
plt.show()

train['Initials'] = 0
test['Initials'] = 0
for i in train:
  train['Initials'] = train.Name.str.extract('([A-Za-z]+)\.')
for i in test:
  test['Initials'] = test.Name.str.extract('([A-Za-z]+)\.')

train['Initials'].value_counts().plot.bar(figsize = (18 , 6) , fontsize = 16 ,title = 'Number of passengers with different initials')

train['Initials'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr'],inplace=True)
test['Initials'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don' ,'Dona'],['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr' ,'Mr'],inplace=True)

train.groupby('Initials')['Age'].mean()

train['Initials'].value_counts().plot.bar(figsize = (18 , 6) , fontsize = 16 ,title = 'Number of passengers with different initials')

## Assigning the NaN Values with the Ceil values of the mean ages
train.loc[(train.Age.isnull())&(train.Initials=='Mr'),'Age']=33
train.loc[(train.Age.isnull())&(train.Initials=='Mrs'),'Age']=36
train.loc[(train.Age.isnull())&(train.Initials=='Master'),'Age']=5
train.loc[(train.Age.isnull())&(train.Initials=='Miss'),'Age']=22
train.loc[(train.Age.isnull())&(train.Initials=='Other'),'Age']=46

test.loc[(train.Age.isnull())&(test.Initials=='Mr'),'Age']=33
test.loc[(train.Age.isnull())&(test.Initials=='Mrs'),'Age']=36
test.loc[(train.Age.isnull())&(test.Initials=='Master'),'Age']=5
test.loc[(train.Age.isnull())&(test.Initials=='Miss'),'Age']=22
test.loc[(train.Age.isnull())&(test.Initials=='Other'),'Age']=46

train['Age'].isnull().any()

f, ax  = plt.subplots(1 , 2,figsize = (18 ,6))
train[train['Survived']==0]['Age'].plot.hist(ax= ax[0] , bins = 20,edgecolor = 'black',color ='red')
ax[0].set_title('Survived = 0')
x1 = list(range(0 , 85 , 5))
ax[0].set_xticks(x1)
train[train['Survived']==1]['Age'].plot.hist(ax=ax[1] , bins = 20 , edgecolor = 'black' , color = 'green')
ax[1].set_title('Survived = 1')
x2 = list(range(0 , 85 , 5))
ax[1].set_xticks(x2)
plt.show()

sns.factorplot('Pclass','Survived',col='Initials',data=train)
plt.show()

pd.crosstab([train.Embarked,train.Pclass],[train.Sex,train.Survived],margins=True ).style.background_gradient(cmap='summer_r')

sns.factorplot('Embarked','Survived',data=train)

f , ax  = plt.subplots(2,2,figsize = (20 , 15))
sns.countplot('Embarked' , data = train , ax = ax[0 , 0])
ax[0,0].set_title('No of Passengers')
sns.countplot('Embarked' , hue = 'Sex' , data =train , ax=ax[ 0 , 1])
ax[0 , 1].set_title('Male-Female Split')
sns.countplot('Embarked' , hue = 'Survived' , data=train , ax=ax[1 ,0])
ax[1 , 0].set_title('Embarked VS Survived')
sns.countplot('Embarked' , hue = 'Pclass' , data = train , ax= ax[1 , 1])
ax[1,1].set_title('Embarked VS Pclass')
plt.show()

sns.factorplot('Pclass','Survived',hue='Sex',col='Embarked',data=train)
plt.show()

train['Embarked'].fillna('S',inplace  = True)
test['Embarked'].fillna('S',inplace  = True)

train['Embarked'].isnull().any()

pd.crosstab([train.SibSp],train.Survived).style.background_gradient(cmap='summer_r')

f, ax  = plt.subplots(1 , 2 , figsize = (18, 6))
sns.barplot('SibSp' , 'Survived' ,data =train, ax= ax[0])
ax[0].set_title('SibSp vs Survived')
sns.factorplot('SibSp' , 'Survived' , data =train ,ax =  ax[1])
ax[1].set_title('SibSp vs Survived')
plt.close(2)
plt.show()

pd.crosstab(train.SibSp,train.Pclass).style.background_gradient(cmap='summer_r')

pd.crosstab(train.SibSp,train.Pclass).style.background_gradient(cmap='summer_r')

f,ax=plt.subplots(1,2,figsize=(18,6))
sns.barplot('Parch','Survived',data=train,ax=ax[0])
ax[0].set_title('Parch vs Survived')
sns.factorplot('Parch','Survived',data=train,ax=ax[1])
ax[1].set_title('Parch vs Survived')
plt.close(2)
plt.show()

f, ax = plt.subplots(1 , 3 ,figsize = (16 , 6))
sns.distplot(train[train['Pclass']==1]['Fare'],ax = ax[0])
ax[0].set_title('Fare in Class 1')
sns.distplot(train[train['Pclass']==2]['Fare'] , ax=ax[1])
ax[1].set_title('Fare in class 2')
sns.distplot(train[train['Pclass']==3]['Fare'] , ax = ax[2])
ax[2].set_title('Fare in class 3')
plt.show()

sns.heatmap(train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2) 
fig=plt.gcf()
fig.set_size_inches(10,8)
plt.show()

train['Age_Group'] = 0
train.loc[train['Age']<16 , 'Age_Group']=0
train.loc[(train['Age']>=16)&(train['Age']<32) , 'Age_Group']=1
train.loc[(train['Age']>=32)&(train['Age']<48) , 'Age_Group']=2
train.loc[(train['Age']>=48)&(train['Age']<64),'Age_Group'] = 3
train.loc[train['Age']>=64,'Age_Group'] = 4

test['Age_Group'] = 0
test.loc[test['Age']<16 , 'Age_Group']=0
test.loc[(test['Age']>=16)&(test['Age']<32) , 'Age_Group']=1
test.loc[(test['Age']>=32)&(test['Age']<48) , 'Age_Group']=2
test.loc[(test['Age']>=48)&(test['Age']<64),'Age_Group'] = 3
test.loc[train['Age']>=64,'Age_Group'] = 4

train.head()

train['Age_Group'].value_counts().to_frame().style.background_gradient(cmap='summer')

sns.factorplot('Age_Group','Survived',data=train,col='Pclass')
plt.show()

train['Family_size'] = 0
train['Family_size']= train['SibSp']+train['Parch']

test['Family_size'] = 0
test['Family_size']= test['SibSp']+test['Parch']


train['Alone']=0
train.loc[train['Family_size']==0 , 'Alone'] = 1

test['Alone']=0
test.loc[test['Family_size']==0 , 'Alone'] = 1



f,ax = plt.subplots(1 , 2 ,figsize=(16 , 6))
sns.factorplot('Family_size' , 'Survived' , data =train , ax=ax[0])
ax[0].set_title('Family_size vs Survived')
sns.factorplot('Alone' , 'Survived' , data = train , ax =ax[1])
ax[1].set_title('Alone vs Survived')
plt.close(2)
plt.close(3)
plt.show()

sns.factorplot('Alone' , 'Survived' , hue = 'Sex' , data = train, col = 'Pclass')
plt.show()

train['Fare_Range'] = pd.qcut(train['Fare'] , 4)
train.groupby(['Fare_Range'])['Survived'].mean().to_frame().style.background_gradient(cmap='summer_r')

train['Fare_cat'] = 0
train.loc[train['Fare']<=7.91 , 'Fare_cat'] = 0
train.loc[(train['Fare']>7.31)&(train['Fare']<=14.45) , 'Fare_cat']=1
train.loc[(train['Fare']>14.45)&(train['Fare']<=31),'Fare_cat']=2
train.loc[(train['Fare']>31) , 'Fare_cat']=3

test['Fare_cat'] = 0
test.loc[test['Fare']<=7.91 , 'Fare_cat'] = 0
test.loc[(test['Fare']>7.31)&(test['Fare']<=14.45) , 'Fare_cat']=1
test.loc[(test['Fare']>14.45)&(test['Fare']<=31),'Fare_cat']=2
test.loc[(test['Fare']>31) , 'Fare_cat']=3

sns.factorplot('Fare_cat','Survived',data=train,hue='Sex')
plt.show()

train['Sex'].replace(['male','female'],[0,1],inplace=True)
train['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)
train['Initials'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)

test['Sex'].replace(['male','female'],[0,1],inplace=True)
test['Embarked'].replace(['S','C','Q'],[0,1,2],inplace=True)
test['Initials'].replace(['Mr','Mrs','Miss','Master','Other'],[0,1,2,3,4],inplace=True)

train.info()

train.drop(['Name','Age','Ticket','Fare','Cabin','Fare_Range','PassengerId'],axis=1,inplace=True)

test.drop(['Name','Age','Ticket','Fare','Cabin','PassengerId'],axis=1,inplace=True)

train.info()

sns.heatmap(train.corr(),annot=True,cmap='RdYlGn',linewidths=0.2)
fig=plt.gcf()
fig.set_size_inches(18,15)
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

training , testing =train_test_split(train , test_size = 0.25 , random_state = 0)
train_x = training[training.columns[1:]]
train_y =training[training.columns[:1]]
test_x = testing[testing.columns[1:]]
test_y = testing[training.columns[:1]]
x= train[train.columns[1:]]
y =train['Survived']

model=RandomForestClassifier(n_estimators=100)
model.fit(train_x,train_y)
prediction=model.predict(test_x)
print('The accuracy of the Random Forests is',metrics.accuracy_score(prediction,test_y))

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import cross_val_predict

kfold = KFold(n_splits = 10 ,random_state = 1998)

cv_result = cross_val_score(model , x, y ,cv =kfold , scoring ='accuracy')
print(cv_result.mean() ,
cv_result.std())

from sklearn.metrics import confusion_matrix

y_pred = cross_val_predict(RandomForestClassifier(n_estimators=100),x,y,cv=10)
sns.heatmap(confusion_matrix(y,y_pred),annot=True,fmt='2.0f')
plt.title('Random Forest Confusion Matrix')

test.info()

train.info()



y_pred = model.predict(test)

df = pd.DataFrame(y_pred)
df.to_csv('pred.csv')